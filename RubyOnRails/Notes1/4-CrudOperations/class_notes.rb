#==========================================================#
#       77. Preview of Alpha Blog App and Information      #
#==========================================================#
# Preview of Alpha Blog App and Information
# Preview of the app moved to section 1, lecture 11, please take a look at section 1 lecture 11 to preview this app. 

# The github repo's for the completed apps using Rails 4 and Rails 5 are provided below:

# Rails 4.2.5: https://github.com/udemyrailscourse/alpha-blog-11-2017-4.2.5

# Rails 5.1.4: https://github.com/udemyrailscourse/alpha-blog-11-2017-5.1.4















#=========================================================================#
#       78. Intro to Section 4: Models, Migrations and Rails Console      #
#=========================================================================#

# in ../../rails_5_projects/alpha_blog
# We are going to be doing something similar to what was done in the scaffolding part of section 3 but doing it from scratch instead of having it generated
# This is useful not only to learn what is going on but also because there is a lot of custom functionality that can be done

# What Table(s) we are building
    # articles
        # ID - Generated by rails so we don't need to worry
        # Title - Title of the article
        # Description - Description of article
    # users
        # ID - Rails generated
        # username
        # email


# Naming conventions
    # Model name: Singular. First letter uppercase (Article, User)
    # Table name: Plural. Lower case of model name (articles, users)
    # Model name filename: All lowercase but singular, (article.rb, user.rb)
    # Controlelr name: Lowercase plural of model (articles_controller.rb, users_controller.rb)

#  Build articles table (or more accurately the outline for it)
    # Generate a migration (be in application root directory)
        # $rails generate migration create_articles
    # This will generate a migration file in ~db/migrate/83249872398904_create_articles.rb
    # The above command created a table but didn't add any columns.

# Add attributes (columns)
    # in the create_table method
        # define the type and name with t.entertypehere :attribute
        # t.string :title

# Now to actually create the table so it can be used and accessed we have to run this method
    # In terminal root of application
        # Rails 5: $rails db:migrate
    # You can see this was generated by looking at ~db/schema.rb
        # This file lists all tables and their attributes

# We forgot to add description but already made the table!
    # Options:
        # NOT PREFERED Rails 5: $rails db:rollback
            # This will remove the articles table that we made
            # Then the migration file just needs updated with the needed tables and regenerate the table
        # PREFERED Rails 5: $rails generate migration add_desctiption_to_articles
            # This will create a new migration file
            # The new migration file only defines a change 
                # We have to add what we want done into the method with:
                    # add_column :tablename, :attribute, :type
                    # add_column :articles, :description, :text
                # While we are at it let's add timestamps
                    # add_column :tablename, :created_at, :datetime
                    # add_column :tablename, updated_at, :datetime

                    # add_column :articles, :created_at, :datetime
                    # add_column : articles, :updated_at :datetime
                
# Now to interact with this new table
# Models will drive communication between the application and the database
    # First we have to make a models file
        # ~app/models/article.rb
    # it needs a class that inherits from the active record in order to communicate with the database
        # class Article < ActiveRecord::Base
    # Rails automatically provides getters and setters for the database
    # This means that we can assign values straight from the rails console
        # $rails console

# Rails console $rails console
# Rails console give you direct access to your database
# You can test db models, methods, connects etc.
    # To check connection to a database (See if it exists)
        # Modelname.all
        # Article.all
    # view attributes of a table
        # Modelname
        # Article
    # Create a new null item
        # Note at the time of typing it into the console it has not been saved so it will not show up in subsequent Article.all calls. It will be saved 
        # variable = Modelname.new
        # article = Article.new
    # Set values of the created item
        # variable.attribute = "Content"
        # article.title = "Article 1 title"
        # article.description = "Article 1 Description"
    # Save the created items and values
        # variable.save
        # article.save
        # This generates a sql query that will create an item in the database with that information
        # Now running Modelname.all (Article.all) will show this new item in the array        
# We can actually do all of the above steps used to create an item in 1 line with MASS ASSIGNMENT
    # Provides a way to assign multiple column values at once
    # variable = Modelname.new(attribute1: "Attribute1 content", attribute2: "Attribute2 content")
    # article = Article.new(title: "Title 1", description: "Description 1")
    # variable.save still has to be run afterwords
# Even shorter!
    # Modelname.create(attr1: "attr1 content", attr2: "attr2 content")
    # Article.create(title: "Title 1", description: "Description 1")
    # This method both assigns the values as well as saves them to the database
# To exit rails console 
    # $exit














#===============================#
#       79. Teacher Notes:      #
#===============================#

# Intro to Models, Migrations and Rails Console - Text directions and references
# Model name: Article, class: Article -> Capitalized A and singular

# File name: article.rb -> singular and all lowercase

# Controller file name: articles_controller.rb, class: ArticlesController -> camel case class name, snake case file name both plural

# Views folder: articles

# Table name: articles -> plural of model

# Model name: User, class: User -> Capitalized U and singular

# File name: user.rb -> singular and all lowercase

# Controller file name: users_controller.rb, class: UsersController -> camel case class name, snake case file name both plural

# Views folder: users

# Table name: users -> plural of model

# To generate a migration to create a table (in this example articles):

# rails generate migration create_articles

# To add attributes for the table in the migration file, add the following inside create_table block:

# t.string :title

# t.text :description

# t.timestamps

# To run the migration file and create the articles table:

# rake db:migrate

# OR

# bundle exec rake db:migrate

# If using Rails 5 -> rails db:migrate

# To rollback a migration (undo the last migration):

# rake db:rollback

# If using Rails 5 -> rails db:rollback

# To add a column (example: created_at column) to the articles table:

# rails generate migration add_created_at_to_articles

# Then within the def change method in the migration file:

# add_column :articles, :created_at, :datetime

# To add a different column (example: name) to a users table:

# rails generate migration add_name_to_users

# Then within the def change method in the migration file:

# add_column :users, :name, :string

# In the above two adding column methods, the first argument is the name of the table, second is the attribute name and third is the type

# To create a model file for Article:

# - In the app/models folder create a file called article.rb

# - Fill it in with the following ->

# class Article < ActiveRecord::Base

# end

# If using Rails 5 ->

# class Article < ApplicationRecord

# end

# To start the rails console:

# rails console

# To test connection to the articles table:

# Article.all # classname.all will list all the articles in the articles table

# Then simply type in Article (classname) to view the attributes

# To create a new article with attributes title and description:

# article = Article.new(title: "This is a test title", description: "This is a test description")

# article.save

# OR

# article = Article.new

# article.title = "This is a test title"

# article.description = "This is a test description"

# article.save

# Another method to do the same:

# article = Article.create(title: "This is a test title", description: "This is a test description") # This will hit the table right away without needing the article.save line





















#==============================================#
#       80. Edit, Delete, and Validations      #
#==============================================#

# This takes place in the rails console ($rails console) but will be used when we create the functions for Article model
# To edit an entry
    # First have to grab or specify which entry we want to change
        # variable = Modelname.find(id)
        # article = Article.find(2)
    # Then we can alter the values
        # variable.attr = "new value"
        # article.title = "This was edited"
    # Then save it
        # variable.save
        # article.save

# To delete an entry
    # First have to grab or specify which entry we want to delete
        # variable = Modelname.find(id)
        # article = Article.find(3)
    # Then we can use destroy function to delete it
        # THIS ALSO SAVES THE DELETION IMMEDIATELY
        # variable.destroy
        # article.destroy

# What if we try .save on an entry with no data?
    # first create a new entry
        # variable = Modelname.new
        # article = Modelname.new
    # Then save it without updating any values
        # variable.save
        # article.save
    # WE DON'T WANT THIS TO HAPPEN

# How do we prevent saving entries with nil values?
    # NOTE RAILS CONSOLE MUST BE RESTARTED FOR CHANGES IN THE MODEL TO TAKE EFFECT
    # We can set validations in the Models file
    # This will check entries before they are submitted to the database and only allow them to be accepted if they meet certain criteria
    # To make sure an entry has both of the attribtues filled before being submitted
    # in ~app/models/nameoftable.rb
        # Validate the first attribute
            # validates :attr1, presence: true
            # validates :title, presence: true
        # Trying to save an entry that is missing that attribute value will result in an error
            # To investigate an error 
                # Does an error exist?
                    # variable.errors.any? => true/false
                    # article.errors.any? => true/false
                # What is the error?
                    # variable.errors.full_messages => "attr can't be blank"
                    # article.errors.full_messages => "title can't be blank"
        # Validate the second attribute
            # validate :attr2, presence: true
            # validate :description, presence: true
        # Now both of them must be present but someone could still enter short worthless information like 'a' and 'b'
            #  validate the length of the value
                #  At end of previous 'validates' line for the attribute add the length section
                # validates :attr1, presence: true, length: {minimum: 3, maximum: 50}
                #validates :title, presence: true, length: {minimum: 3, maximum: 50}
                # REPEAT FOR ATTR2/DESCRIPTION AND CHANGE VALUES AS NEEDED



















#===============================#
#       81. Teacher Notes:      #
#===============================#

# Edit, Delete and Validations - Text directions and code
# To find an article with id 2 and edit it's title:

# article = Article.find(2) # Here assumption is article with id of 2 was being looked for

# article.title = "This is an edited title"

# article.save

# To delete an article, example with id 5:

# article = Article.find(5)

# article.destroy

# To add validations presence and length validations to article model for title and description:

# class Article < ActiveRecord::Base

# validates :title, presence: true, length: {minimum: 3, maximum: 50}

# validates :description, presence: true, length: {minimum: 10, maximum: 300}

# end

# If using Rails 5, the first line above would be -> class Article < ApplicationRecord

# To find errors in article object while saving (if it's rolled back):

# article.errors.any?

# article.errors.full_messages
























#============================================#
#       82. Create New Articles From UI      #
#============================================#

# General lifecycle of an article object
    # Create an instance variable in articles_controller.rb
    # it will receive the values that are entered in a page as an object
    # These values will be handled by the create action
    # Create action takes the values and attributes and whitelists them
        # Once they are whitelisted the create action will create a new instance variable w/ title and description values
    # The controller will validate what was entered
    # If it passes validation it will be saved to the database

# To create the form page:
    # First we have to create a route to the page
        # localhost:3000/articles/new
    # in ~config/routes.rb
        # add line: resources :articles
            # this line will add several different routes/paths and actions that we can do with :articles
            # You can see these with rails routes
                # paths: /articles, /edit, /delete, /show, /index
                # post: create 
                # patch: update
    # Next to build the articles controller
    # create ~/app/controllers/articles_controller.rb 
        # add new class ArticlesController that inherits from ApplicationController
            # class ArticlesController < ApplicationController
            # end
        # add the "new" route/action that we want inside this class
            # def new
            # end
    # Now to add a template 
    # Create ~app/views/articles/new.html.erb
        # add any HTML needed here
        # We have to add a model back form to the page to receive user input
        # Rails has a shortcut for this to make it easier to generate forms
            # add <%= form_for @article do |f|%>
        # This won't work right away ebcause we didn't initiat @article
            # in ~app/controllers/articles_controller.rb (in the "new" method)
                # add: @article = Article.new
        # Now we can add the form items in ~app/views/articles/new/html.erb
            # Title: inside <p> tags place title form items <br/> for line break
                # <%= f.label :title %><br/>
                # <%= f.text_field :title %>
            # Description: inside <p> tags place description form items
                # <%= f.label :description %>
                # <%= f.text_area :description %>
            # Submit button: inside <p> tags place button items
                # <%= f.submit %>
        # At this point we have the form visibile

    # Right now the form is just visible but it doesn't have any functionality
    # We need to write a method to submit the data from the text fields
    # in ~app/controllers/articles_controller.rb (write a brand new method called  create)
        # def create
        # end
    # in order to see these changes we can add a line in the "create function"
        # render plain: params[:article].inspect
            # => <ActionController::Parameters {"title"=>"test2", "description"=>"test2"} permitted: false>
            # this shows that whatever is in the fields is passed whenever we click the create button
    # Now that we know we can pass the data we have to save it somewhere
        # We have to create a new instance variable
        # We have to pass into it the values from the form but we can't do that directly
        # To do that we have to whitelist the values of article
        # For now just use: (in create method)
            # @article = Article.new(article_params)
            # @article.save
        # THEN CREATE A NEW PRIVATE METHOD WITHIN THE ARTICLES CONTROLLER CLASS
            # private
            # def article_params
            #     params.require(:article).permit(:title, :description)
            # end
    # At this point it is now saving in the Database!

    # Now the issue is that our application doesn't know what to do after it submits the data to the database
    # That's why it stays on the same page
    # We need to direct to the show template after it has created the article
    # To do that in ~app/controllers/articles_controller.rb (create method after saving to db)
        # redirect_to article_path(@article)
    # Adding a new article now will still save it to the database but we the method we wrote above points to a view that doesn't exist



































#===============================#
#       83. Teacher Notes:      #
#===============================#

# Create New Articles from UI - Text directions and code
# In the config/routes.rb file add the following line to add all the routes for articles:

# resources :articles

# This will add the following routes:

# routes path HTTP verb link controller#action

# articles index articles GET /articles articles#index

# new article new_article GET /articles/new articles#new

# create article POST /articles articles#create

# edit article edit_article GET /articles/:id articles#edit

# update article PATCH /articles/:id articles#update

# show article article GET /articles/:id articles#show

# delete article DELETE /articles/:id articles#destroy

# To create articles controller with a new action, under app/controllers create a file named articles_controller.rb (snake case):

# class ArticlesController < ApplicationController

# def new

# @article = Article.new

# end

# end

# To create a view, under app/views create a folder named articles and within it create a file named new.html.erb then fill in the following:

# <h1>Create an article</h1>

# <%= form_for @article do |f| %>

# <p>

# <%= f.label :title %><br/>

# <%= f.text_field :title %>

# </p>

# <p>

# <%= f.label :description %><br/>

# <%= f.text_area :description %>

# </p>

# <p>

# <%= f.submit %>

# </p>

# <% end %>

# Create action and private article_params method for string parameters in the articles controller (Note: This is not complete):

# def create

# @article = Article.new(article_params)

# @article.save

# redirect_to article_path(@article)

# end

# private

# def article_params

# params.require(:article).permit(:title, :description)

# end

























#==============================================#
#       84. Complete New and Show Actions      #
#==============================================#

# We can currently create new articles with articles/new page but there are a few errors that need fixed and we have to load the preview after submitting the data
# Fright now we are assuming that afte we submit the data it will always be accepted
# We haven't yet accounted for if the data doesn't pass validation
# in order to do that we need to use an if statement
# Delete all the code in the create method except for when @article initializes a new Article object
    # @article = Article.new(article_params)
# Add the following below where @article is initialized
    # if @article.after_save
    #     flash[:notice] = "Article was successfully created"
    #     redirect_to article_path(@article)
    # else
    #     render 'new'
    # end
# Now there is a flash[:notice] that we have to handle
    # This is going to be added in ~app/views/layouts/application.html.erb
    # This is so that we can show this notice on any page that we want where it will be useful later (like something could not update, delete etc)
    # above the <%= yield %> tag
        # <% flash.each do |name, msg| %>
        #   <ul>
        #       <li><%= msg  %></li>
        #   </ul>
        # <% end %>
# This will check if saving the article is succesful and if so display a message saying so and redirecting to the new path
    # if unsuccesul it will reload the page
# Now if we try to create an article with invalid values it won't create the article but it doesn't tell you that it doesn't or tell you why
    #  we can make this show by going in ~app/views/articles/new.html.erb
        # <% if @article.errors.any? %>
        #   <h2> The following erros prevented the article from saving </h2>
        #   <ul>
        #     <% @article.errors.full_messages.each do |msg|%>
        #       <li><%= msg %> </li>
        #     <% end %>
        #   </ul>
        # <% end %> 
# Now if either of the values are invalid they will not be submitted and there will be an error that shows

# We still need to handle what should happen if the article saves successfully
# in ~app/controllers/articles_controller
# We want to show a specific article so we have to pass the id of the article we just created into show
# Create a new method called "show"
    # def show
    #   @article = Article.find(params[:id])
    # end

# Now we have the action of loading the page yet but the view to do so doesn't exist yet
# We have to create a template 
# in ~app/vies/articles/show.html.erb (created)
# Now we have handled both situations when creating an article
    # Success
        # Message added to top of screen that article was successfully created
        # New page is loaded with entered values labeled
    # Error
        # New article page reloads with blank values
        # Shows errors for why the article was rejected
























#===============================#
#       85. Teacher Notes:      #
#===============================#

# Complete New and Show Actions - Text directions and code
# Completed create action in articles controller:

# def create

# @article = Article.new(article_params)

# if @article.save

# flash[:notice] = "Article was successfully created"

# redirect_to article_path(@article)

# else

# render 'new'

# end

# end

# Flash message code added to application.html.erb under app/views/layouts folder (right under <body> and above <%= yield %>:

# <% flash.each do |name, msg| %>

# <ul>

# <li><%= msg %></li>

# </ul>

# <% end %>

# Code added to display errors in the new.html.erb template under app/views/articles folder:

# <% if @article.errors.any? %>

# <h2>The following errors prevented the article from getting created</h2>

# <ul>

# <% @article.errors.full_messages.each do |msg| %>

# <li><%= msg %></li>

# <% end %>

# </ul>

# <% end %>

# To create the show action, add the following show method to articles_controller.rb file:

# def show

# @article = Article.find(params[:id])

# end

# To create the show view, add a show.html.erb file under the app/views/articles folder and fill in the code:

# <h1>Showing selected article</h1>

# <p>

# Title: <%= @article.title %>

# </p>

# <p>

# Description: <%= @article.description %>

# </p>





























#==============================#
#       86. Edit Articles      #
#==============================#

# Now we need to create functionality to get an article, change its values, and resave it to the database
# Take a look at the editing articles route ($rails routes)
    # ~/articles/:id/edit
# First we have to set up the action in the ArticlesController
    # def edit
    # end
# Then we have to create the edit articles view
    # create ~app/views/articles/edit.html.erb
    # We can copy/paste the entirety of new.html.erb into edit
    # This is because we want both the validation to show errors if saving is unsuccessful and because a form is needed to enter new values into
    # This will not load the page because we never defined the @articles instance variable within the edit function in the ArticlesController
        # @article = Article.fine(params[:id])
    # rails is actually smart enough to enter the values into the form since we are using a model backed form and it knows what values we want to edit

# Now we have create an update method to run in order to submit the data
# In order to do this we have to create an "update" method in the ArticlesController
    # def update
    #   @article = Article.find(params[:id])
    #   if @article.update(article_params)
    #       flash[:notice] = "Article was successfully updated"
    #       redirect_to article_path(@article)
    #   else
    #       render 'edit'
    #   end
    # end
























#===============================#
#       87. Teacher Notes:      #
#===============================#

# Edit Articles - Text directions and code
# Route for editing articles takes the form ->

# /articles/:id/edit

# Edit action in the articles controller:

# def edit

# @article = Article.find(params[:id])

# end

# Update action in the articles controller:

# def update

# @article = Article.find(params[:id])

# if @article.update(article_params)

# flash[:notice] = "Article was successfully updated"

# redirect_to article_path(@article)

# else

# render 'edit'

# end

# end

# To create edit template, create a file named edit.html.erb under the app/views/articles folder and fill in the following code:

# <h1>Edit existing article</h1>

# <% if @article.errors.any? %>

# <h2>The following errors prevented the article from getting created</h2>

# <ul>

# <% @article.errors.full_messages.each do |msg| %>

# <li><%= msg %></li>

# <% end %>

# </ul>

# <% end %>

# <%= form_for @article do |f| %>

# <p>

# <%= f.label :title %><br/>

# <%= f.text_field :title %>

# </p>

# <p>

# <%= f.label :description %><br/>

# <%= f.text_area :description %>

# </p>

# <p>

# <%= f.submit %>

# </p>

# <% end %>























#===============================================#
#       88. List Articles and Layout Links      #
#===============================================#

# Now we want to show a list of all of our articles 
# The route for this is called the index route
# Formatted ~/articles
# So first we have to add the index action in articles_controller
    # This method also needs access to the full list of articles
    # in app/controllers/articles_controller create a new "index method"
        # def index
        #   @articles = Article.all
        # end
# Now we have to create a template for the page 
    # create app/vies/articles/index.html.erb
    # To fill in the information listing each of these articles
    # use a table 
    # In this table we need to loop through the @articles (which contains the list of all articles Articles.all)
    # For every article in @articles we want to display the title information in a title column and it's accompanying description in the description column in the same row
    # We can also add a link to each individual articles edit, and show page
        # <table>
        #   <tr>
        #       <th> Title </th>
        #       <th> Description </th>
        #   </tr>
        #
        # <% @articles.each do |article| %>
        #   <tr>
        #       <td> <%= article.title %> </td>
        #       <td> <%= article.description %> </td>
        #       <td> <%= link_to 'Edit', edit_article_path(article) %> </td>
        #       <td> <%= link_to 'Show', article_path(article) %></td>
        #   </tr>
        # <% end %>
        # </table>

# To keep things clean and flowing well lets add a couple navigation links
# in new.html.erb
    # Create a link that goes back to ~/articles (index.html.erb)
        # <%= link_to 'Back to articles listing', articles_path %>
# in edit.html.erb
    # Create a link that goes back to ~/articles (index.html.erb)
        # <%= link_to 'Back to articles listing', articles_path %>
# in show.html.erb
    # Create a link that goes back to ~/articles (index.html.erb)
        # <%= link_to 'Back to articles listing', articles_path %>
    # Create a link to edit the current article
        # <%= link_to 'Edit article', edit_article_path(@article) %>























#===============================#
#       89. Teacher Notes:      #
#===============================#

# List Articles and Layout Links - Text directions and code
# To create listings index first add the index action to acticles controller:

# def index

# @articles = Article.all

# end

# Create the view file index.html.erb under app/views/articles folder:

# <h1>Listing all articles</h1>

# <p>

# <%= link_to "Create new article", new_article_path %>

# </p>

# <table>

# <tr>

# <th>Title</th>

# <th>Description</th>

# </tr>

# <% @articles.each do |article| %>

# <tr>

# <td><%= article.title %></td>

# <td><%= article.description %></td>

# <td><%= link_to 'Edit', edit_article_path(article) %></td>

# <td><%= link_to 'Show', article_path(article) %></td>

# </tr>

# <% end %>

# </table>

# Then update the views with links ->

# show.html.erb:

# <h1>Showing selected article</h1>

# <p>

# Title: <%= @article.title %>

# </p>

# <p>

# Description: <%= @article.description %>

# </p>

# <%= link_to "Edit this article", edit_article_path(@article) %> |

# <%= link_to "Back to articles listing", articles_path %>

# Add the back to articles listing path to the bottom of both new.html.erb and edit.html.erb pages:

# <%= link_to "Back to articles listing", articles_path %>

























#=====================================#
#       90. Destroy and Partials      #
#=====================================#

# Now we need the ability to delete articles
# But first lets look at partials
    # They are used to extract reduntencies in our code
    # Looking at edit.html.erb and new.html.erb they contain mostly the same code
    # We can store this code somewhere else and call it in both pages 
    # That way if we ever have to edit the code we can just edit in one place 
# create ~app/views/articles/_form.html.erb
    # an "_" at the beginning is used to identify a partial by rails 
    # Place the form code (and error notification) from either edit.html.erb or new.html.erb into _form.html.erb
# Now edit both edit.html.erb and new.html.erb
    # Replace section of code that was copied
        # <%= render 'form' %>

# Lets do the same for ~app/views/layouts/application.html.erb
# This way we can keep our main file as clean as possible
# The flash notice can be moved to it's own file to reduce clutter

# Now we can work on deleting/destroying an article
# Add destroy action to articles_controller.rb
    # def destroy
    #   @article = Article.find(params[:id])
    #   @article.destroy
    #   flash[:notice] = "Article was successfully deleted"
    #   redirect_to articles_path
    # end
# Now we have to add a link to call the destroy function
# Starting with the index page add the following row into the table that is created from the loop
    # <td> <%= link_to 'Delete', article_path(article), method: :delete %></td>

























#===============================#
#       91. Teacher Notes:      #
#===============================#

# Destroy and Partials - Text directions and code
# Add this link to the homepage (root route) so you can access the blog from the homepage:

# <%= link_to "Alpha Blog", articles_path %>

# Under app/views/layouts folder create a _messages.html.erb file (messages partial) and remove the following code from application.html.erb to this file:

# <% flash.each do |name, msg| %>

# <ul>

# <li><%= msg %></li>

# </ul>

# <% end %>

# In place of this code in the application.html.erb add the following code:

# <%= render 'layouts/messages' %>

# Create a file under app/views/articles folder called _form.html.erb and fill it in with the following code (copied from the new or edit.html.erb page):

# <% if @article.errors.any? %>

# <h2>The following errors prevented the article from getting created</h2>

# <ul>

# <% @article.errors.full_messages.each do |msg| %>

# <li><%= msg %></li>

# <% end %>

# </ul>

# <% end %>

# <%= form_for @article do |f| %>

# <p>

# <%= f.label :title %><br/>

# <%= f.text_field :title %>

# </p>

# <p>

# <%= f.label :description %><br/>

# <%= f.text_area :description %>

# </p>

# <p>

# <%= f.submit %>

# </p>

# <% end %>

# <%= link_to "Back to articles listing", articles_path %>

# Then remove the code above from both new.html.erb and edit.html.erb files and in it's place add the following code:

# <%= render 'form' %>

# To add the destroy method, first add the following to the articles controller:

# def destroy

# @article = Article.find(params[:id])

# @article.destroy

# flash[:notice] = "Article was successfully deleted"

# redirect_to articles_path

# end

# Then in the index.html.erb (listings page) add the following link as one of the <td> items under the show article link:

# <td><%= link_to 'Delete', article_path(article), method: :delete, data: {confirm: "Are you sure?"} %></td>

























#==========================================#
#       92. Deploy and Wrap Section 4      #
#==========================================#

# Production deploy and wrap-up section 4 - text directions, references and code
# To deploy app to production ->

# - If you have not set up your Heroku account, application and CLI (command line interface) toward the end of section 3, then please go ahead and complete those steps.

# - Ensure your Gemfile has sqlite3 gem in group dev, test and pg gem in group production.

# - Run bundle install --without production

# - Make a commit of your code.

# $ git add -A
# $ git commit -m "helpful message about the code you're committing"
# - Deploy to heroku:

# $ git push heroku master

# - Once deployed run the following command to run your migration files in production:

# $ heroku run rails db:migrate
# Go to https://your-app-name.herokuapp.com and verify deployment. You can also issue the heroku open command from the terminal to preview your application in a new browser tab.

# Congratulations!

# Don't forget to post a link to your app in the Q & A so we can take a look!


























#===================#
#       Quiz 4      #
#===================#

# When a request is made form the browser, which part of the rails application receives this request?
    # Controller
    # View
    # Router => True

# For a destroy action, what are you supposed to mention as method: in the view?
    # method: :delete => true
    # method: :post
    # method: :get

# What is the action which handles the form submission resulting from an edit action?
    # Create
    # show
    # destroy and then create
    # update => true
